---
import { Image } from "astro:assets";
import { CircleArrowRight, CircleArrowLeft, CircleX } from "lucide-react";
import { Card, CardContent } from "~/components/ui/card"; // Assuming these are still available or have Astro equivalents
import image1 from "../assets/testimonial-01.png";
import image2 from "../assets/testimonial-02.png";
import image3 from "../assets/testimonial-03.png";
import image4 from "../assets/testimonial-04.png";
import image5 from "../assets/testimonial-05.png";
import image6 from "../assets/testimonial-06.png";
import image7 from "../assets/testimonial-07.png";
import image8 from "../assets/testimonial-08.png";
import image9 from "../assets/testimonial-09.png";
import image10 from "../assets/testimonial-10.png";
import image11 from "../assets/testimonial-11.png";
import image12 from "../assets/testimonial-12.png";
import image13 from "../assets/testimonial-13.png";
import image14 from "../assets/testimonial-14.png";
import image15 from "../assets/testimonial-15.png";

const images = [
  { src: image1, alt: "отзыв о курсе 1" },
  { src: image2, alt: "отзыв о курсе 2" },
  { src: image3, alt: "отзыв о курсе 3" },
  { src: image4, alt: "отзыв о курсе 4" },
  { src: image5, alt: "отзыв о курсе 5" },
  { src: image6, alt: "отзыв о курсе 6" },
  { src: image7, alt: "отзыв о курсе 7" },
  { src: image8, alt: "отзыв о курсе 8" },
  { src: image9, alt: "отзыв о курсе 9" },
  { src: image10, alt: "отзыв о курсе 10" },
  { src: image11, alt: "отзыв о курсе 11" },
  { src: image12, alt: "отзыв о курсе 12" },
  { src: image13, alt: "отзыв о курсе 13" },
  { src: image14, alt: "отзыв о курсе 14" },
  { src: image15, alt: "отзыв о курсе 15" },
];

let lightboxOpen = false;
let selectedImageIndex = 0;

const handleImageClick = (index: number) => {
  selectedImageIndex = index;
  lightboxOpen = true;
};

const closeLightbox = () => {
  lightboxOpen = false;
};

const handlePrevImage = () => {
  selectedImageIndex =
    selectedImageIndex === 0 ? images.length - 1 : selectedImageIndex - 1;
};

const handleNextImage = () => {
  selectedImageIndex =
    selectedImageIndex === images.length - 1 ? 0 : selectedImageIndex + 1;
};
---

<section
  id="gallery"
  class="container py-24 sm:py-32 flex flex-col items-center overflow-hidden"
>
  <h2 class="text-3xl md:text-4xl font-bold">
    Что
    <span class="bg-gradient-to-b from-primary/60 to-primary bg-clip-text">
      {" "}Говорят{" "}
    </span>
    Люди
  </h2>

  <p class="text-xl text-muted-foreground pt-4 pb-8">
    Отзывы людей с которыми я работала и обучала
  </p>

  <div class="w-full relative">
    <div class="carousel">
      <div class="carousel-content flex transition-transform duration-300 ease-in-out">
        {
          images.map((image, index) => (
            <div class="carousel-item max-w-md md:break-inside-avoid w-1/3 px-4">
              <div class="p-1">
                <Card>
                  <CardContent
                    className="flex items-center justify-center p-6 cursor-pointer"
                    onClick={() => handleImageClick(index)}
                  >
                    <Image
                      src={image.src}
                      alt={image.alt || `Image ${index + 1}`}
                      class="max-w-full max-h-full object-contain"
                      loading="lazy"
                    />
                  </CardContent>
                </Card>
              </div>
            </div>
          ))
        }
      </div>
      <button
        class="carousel-prev absolute left-4 top-1/2 -translate-y-1/2 bg-white/70 hover:bg-white p-2 rounded-full"
        onClick={() => {
          const carouselContent = document.querySelector(".carousel-content");
          if (carouselContent) {
            carouselContent.scrollLeft -= carouselContent.children[0].clientWidth;
          }
        }}
      >
        <CircleArrowLeft client:load className="size-8" />
      </button>
      <button
        class="carousel-next absolute right-4 top-1/2 -translate-y-1/2 bg-white/70 hover:bg-white p-2 rounded-full"
        onClick={() => {
          const carouselContent = document.querySelector(".carousel-content");
          if (carouselContent) {
            carouselContent.scrollLeft += carouselContent.children[0].clientWidth;
          }
        }}
      >
        <CircleArrowRight client:load className="size-8" />
      </button>
    </div>
  </div>

  <!-- Lightbox Modal -->
  {
    lightboxOpen && (
      <div class="fixed top-0 left-0 w-screen h-screen flex items-center justify-center bg-black bg-opacity-70 z-50">
        <div class="relative max-w-4xl max-h-5/6  bg-white rounded-lg shadow-lg p-4 overflow-auto">
          <button
            class="absolute top-8 right-8 text-gray-600 text-2xl focus:outline-none"
            onClick={closeLightbox}
          >
            <CircleX client:load className="size-12" />
          </button>
          <button
            class="absolute left-8 top-1/2 text-gray-600 text-2xl focus:outline-none"
            onClick={handlePrevImage}
          >
            <CircleArrowLeft client:load className="size-8" />
          </button>

          <Image
            src={images[selectedImageIndex].src}
            alt={
              images[selectedImageIndex].alt ||
              `Lightbox Image ${selectedImageIndex + 1}`
            }
            class="max-w-screen max-h-screen object-contain"
          />

          <button
            class="absolute right-8 top-1/2 text-gray-600 text-2xl focus:outline-none"
            onClick={handleNextImage}
          >
            <CircleArrowRight client:load className="size-8" />
          </button>
        </div>
      </div>
    )
  }
</section>

<script>
  let lightboxOpen = false;
  let selectedImageIndex = 0;

  const handleImageClick = (index: number) => {
    selectedImageIndex = index;
    lightboxOpen = true;
    updateLightbox();
  };

  const closeLightbox = () => {
    lightboxOpen = false;
    updateLightbox();
  };

  const handlePrevImage = () => {
    selectedImageIndex =
      selectedImageIndex === 0 ? images.length - 1 : selectedImageIndex - 1;
    updateLightbox();
  };

  const handleNextImage = () => {
    selectedImageIndex =
      selectedImageIndex === images.length - 1 ? 0 : selectedImageIndex + 1;
    updateLightbox();
  };

  const updateLightbox = () => {
    const lightbox = document.querySelector(".lightbox");
    const img = lightbox?.querySelector("img");
    const prevBtn = lightbox?.querySelector(".prev");
    const nextBtn = lightbox?.querySelector(".next");
    const closeBtn = lightbox?.querySelector(".close");

    if (lightboxOpen && lightbox && img) {
      img.src = images[selectedImageIndex].src.src;
      img.alt = images[selectedImageIndex].alt || `Image ${selectedImageIndex + 1}`;
      lightbox.classList.remove("hidden");
    } else if (lightbox) {
      lightbox.classList.add("hidden");
    }

    prevBtn?.addEventListener("click", handlePrevImage);
    nextBtn?.addEventListener("click", handleNextImage);
    closeBtn?.addEventListener("click", closeLightbox);
  };

  // Carousel functionality
  const carouselContent = document.querySelector(".carousel-content");
  const prevBtn = document.querySelector(".carousel-prev");
  const nextBtn = document.querySelector(".carousel-next");

  if (carouselContent && prevBtn && nextBtn) {
    prevBtn.addEventListener("click", () => {
      carouselContent.scrollLeft -= carouselContent.children[0].clientWidth;
    });

    nextBtn.addEventListener("click", () => {
      carouselContent.scrollLeft += carouselContent.children[0].clientWidth;
    });
  }

  // Event listeners for clicks on images
  const carouselItems = document.querySelectorAll(".carousel-item");
  carouselItems.forEach((item, index) => {
    item.addEventListener("click", () => handleImageClick(index));
  });
</script>

<style>
  .carousel {
    position: relative;
    overflow: hidden;
  }

  .carousel-content {
    display: flex;
    transition: transform 0.3s ease-in-out;
    scroll-behavior: smooth;
    
  }

  .carousel-item {
    flex: 0 0 auto;
    /* width: 33.333%; */
  }

  .carousel-prev,
  .carousel-next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background-color: rgba(255, 255, 255, 0.7);
    padding: 0.5rem;
    border-radius: 50%;
    cursor: pointer;
    z-index: 10;
  }

  .carousel-prev {
    left: 1rem;
  }

  .carousel-next {
    right: 1rem;
  }
  .hidden {
    display: none;
  }
  .lightbox {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    z-index: 50;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .lightbox .content {
    position: relative;
    max-width: 80%;
    max-height: 80%;
    background-color: white;
    border-radius: 0.5rem;
    padding: 1rem;
    overflow: auto;
  }
  .lightbox img {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
  }
  .lightbox .prev,
  .lightbox .next {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    color: #666;
    font-size: 2rem;
    cursor: pointer;
  }
  .lightbox .prev {
    left: 2rem;
  }
  .lightbox .next {
    right: 2rem;
  }
  .lightbox .close {
    position: absolute;
    top: 2rem;
    right: 2rem;
    color: #666;
    font-size: 2rem;
    cursor: pointer;
  }
</style>